Problem Description
  Given an array of integers A, find and return the peak element in it. An array element is peak if it is NOT smaller than its neighbors.
  For corner elements, we need to consider only one neighbor. We ensure that answer will be unique.
NOTE: Users are expected to solve this in O(log(N)) time. The array may have duplicate elements.

Problem Constraints
1 <= |A| <= 100000. 1 <= A[i] <= 109

Input Format
  The only argument given is the integer array A.
Output Format
  Return the peak element.

Example Input
A = [1, 2, 3, 4, 5] ans = 5

A = [5, 17, 100, 11] ans = 100

A = [1 5 3 2 9 10] Invalid input, only one answer will exist.

Approach - Try identifying array type, It will be one of three
            1) Increaing and decreasing - ans is peak
            2) Increaing - ans is last element
            3) Decreasing - ans is first element
            
Solution

int Solution::solve(vector<int> &A) {
    int n = A.size();
    int left = 0, right = n-1;
    int ans = 0;
    while(left<=right){
        int mid = left + (right-left)/2;
        if (A[mid] < A[mid+1] && mid < n-1){
            ans = A[mid+1];
            left = mid+1;
        }
        else{
            ans = A[mid];
            right = mid-1;
        }
    }
    return ans;
}
